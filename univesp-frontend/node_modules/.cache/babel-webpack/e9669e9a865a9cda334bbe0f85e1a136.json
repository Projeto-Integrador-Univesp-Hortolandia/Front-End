{"ast":null,"code":"import _asyncToGenerator from \"E:/UNIVESP/PI2022/Front-End/univesp-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Injectable, Inject, forwardRef, Directive, Input, Output, HostListener, Pipe, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\nconst config = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: ['.', ','],\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // eslint-disable-next-line @typescript-eslint/quotes\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  leadZeroDateTime: false,\n  triggerOnMaskChange: false,\n  maskFilled: new EventEmitter(),\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d')\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*'\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]')\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]')\n    },\n    U: {\n      pattern: new RegExp('[A-Z]')\n    },\n    L: {\n      pattern: new RegExp('[a-z]')\n    },\n    d: {\n      pattern: new RegExp('\\\\d')\n    },\n    m: {\n      pattern: new RegExp('\\\\d')\n    },\n    M: {\n      pattern: new RegExp('\\\\d')\n    },\n    H: {\n      pattern: new RegExp('\\\\d')\n    },\n    h: {\n      pattern: new RegExp('\\\\d')\n    },\n    s: {\n      pattern: new RegExp('\\\\d')\n    }\n  }\n};\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nconst withoutValidation = ['percent', 'Hh', 's0', 'm0', 'separator', 'd0/M0/0000', 'd0/M0', 'd0', 'M0'];\n\nclass MaskApplierService {\n  constructor(_config) {\n    this._config = _config;\n    this.maskExpression = '';\n    this.actualValue = '';\n    this.shownMaskExpression = '';\n\n    this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n      let x = [];\n      let decimalChar = '';\n\n      if (Array.isArray(decimalChars)) {\n        const regExp = new RegExp(decimalChars.map(v => '[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v).join('|'));\n        x = str.split(regExp);\n        decimalChar = str.match(regExp)?.[0] ?? '';\n      } else {\n        x = str.split(decimalChars);\n        decimalChar = decimalChars;\n      }\n\n      const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n      let res = x[0];\n      const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n\n      if (separatorLimit && +separatorLimit) {\n        if (res[0] === '-') {\n          res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n        } else {\n          res = res.slice(0, separatorLimit.length);\n        }\n      }\n\n      const rgx = /(\\d+)(\\d{3})/;\n\n      while (thousandSeparatorChar && rgx.test(res)) {\n        res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n      }\n\n      if (precision === undefined) {\n        return res + decimals;\n      } else if (precision === 0) {\n        return res;\n      }\n\n      return res + decimals.substr(0, precision + 1);\n    };\n\n    this.percentage = str => {\n      return Number(str) >= 0 && Number(str) <= 100;\n    };\n\n    this.getPrecision = maskExpression => {\n      const x = maskExpression.split('.');\n\n      if (x.length > 1) {\n        return Number(x[x.length - 1]);\n      }\n\n      return Infinity;\n    };\n\n    this.checkAndRemoveSuffix = inputValue => {\n      for (let i = this.suffix?.length - 1; i >= 0; i--) {\n        const substr = this.suffix.substr(i, this.suffix?.length);\n\n        if (inputValue.includes(substr) && (i - 1 < 0 || !inputValue.includes(this.suffix.substr(i - 1, this.suffix?.length)))) {\n          return inputValue.replace(substr, '');\n        }\n      }\n\n      return inputValue;\n    };\n\n    this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n      if (precision < Infinity) {\n        // TODO need think about decimalMarker\n        if (Array.isArray(decimalMarker)) {\n          const marker = decimalMarker.find(dm => dm !== this.thousandSeparator); // eslint-disable-next-line no-param-reassign\n\n          decimalMarker = marker ? marker : decimalMarker[0];\n        }\n\n        const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n        const precisionMatch = inputValue.match(precisionRegEx);\n\n        if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n          const diff = precisionMatch[0].length - 1 - precision; // eslint-disable-next-line no-param-reassign\n\n          inputValue = inputValue.substring(0, inputValue.length - diff);\n        }\n\n        if (precision === 0 && this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.substring(0, inputValue.length - 1);\n        }\n      }\n\n      return inputValue;\n    };\n\n    this._shift = new Set();\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.maskSpecialCharacters = this._config.specialCharacters;\n    this.maskAvailablePatterns = this._config.patterns;\n    this.prefix = this._config.prefix;\n    this.suffix = this._config.suffix;\n    this.thousandSeparator = this._config.thousandSeparator;\n    this.decimalMarker = this._config.decimalMarker;\n    this.hiddenInput = this._config.hiddenInput;\n    this.showMaskTyped = this._config.showMaskTyped;\n    this.placeHolderCharacter = this._config.placeHolderCharacter;\n    this.validation = this._config.validation;\n    this.separatorLimit = this._config.separatorLimit;\n    this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n    this.leadZeroDateTime = this._config.leadZeroDateTime;\n  }\n\n  applyMaskWithPattern(inputValue, maskAndPattern) {\n    const [mask, customPattern] = maskAndPattern;\n    this.customPattern = customPattern;\n    return this.applyMask(inputValue, mask);\n  }\n\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => {}) {\n    if (!maskExpression || typeof inputValue !== 'string') {\n      return '';\n    }\n\n    let cursor = 0;\n    let result = '';\n    let multi = false;\n    let backspaceShift = false;\n    let shift = 1;\n    let stepBack = false;\n\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n    }\n\n    if (!!this.suffix && inputValue?.length > 0) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.checkAndRemoveSuffix(inputValue);\n    }\n\n    const inputArray = inputValue.toString().split('');\n\n    if (maskExpression === 'IP') {\n      this.ipError = inputArray.filter(i => i === '.').length < 3 && inputArray.length < 7; // eslint-disable-next-line no-param-reassign\n\n      maskExpression = '099.099.099.099';\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputValue.length; i++) {\n      if (inputValue[i]?.match('\\\\d')) {\n        arr.push(inputValue[i]);\n      }\n    }\n\n    if (maskExpression === 'CPF_CNPJ') {\n      this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n\n      if (arr.length > 11) {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '00.000.000/0000-00';\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '000.000.000-00';\n      }\n    }\n\n    if (maskExpression.startsWith('percent')) {\n      if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n        const precision = this.getPrecision(maskExpression); // eslint-disable-next-line no-param-reassign\n\n        inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      }\n\n      if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n        const base = inputValue.substring(0, inputValue.indexOf('.') - 1); // eslint-disable-next-line no-param-reassign\n\n        inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n      }\n\n      if (this.percentage(inputValue)) {\n        result = inputValue;\n      } else {\n        result = inputValue.substring(0, inputValue.length - 1);\n      }\n    } else if (maskExpression.startsWith('separator')) {\n      if (inputValue.match('[wа-яА-Я]') || inputValue.match('[ЁёА-я]') || inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) || inputValue.match('[^A-Za-z0-9,]')) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n      } // eslint-disable-next-line no-param-reassign\n\n\n      inputValue = inputValue.length > 1 && inputValue[0] === '0' && !this._compareOrIncludes(inputValue[1], this.decimalMarker, this.thousandSeparator) && !backspaced ? inputValue.slice(1, inputValue.length) : inputValue;\n\n      if (backspaced) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator) ? inputValue.slice(0, inputValue.length - 1) : inputValue;\n      } // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n      //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n\n\n      const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n\n      let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, ''); //.replace(decimalMarkerEscaped, '');\n\n      if (Array.isArray(this.decimalMarker)) {\n        for (const marker of this.decimalMarker) {\n          invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), '');\n        }\n      } else {\n        invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n      }\n\n      const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n\n      if (inputValue.match(invalidCharRegexp) || inputValue.length === 1 && this._compareOrIncludes(inputValue, this.decimalMarker, this.thousandSeparator)) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      }\n\n      const precision = this.getPrecision(maskExpression); // eslint-disable-next-line no-param-reassign\n\n      inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n      result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n      const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n      const shiftStep = result.length - inputValue.length;\n\n      if (shiftStep > 0 && result[position] !== ',') {\n        backspaceShift = true;\n        let _shift = 0;\n\n        do {\n          this._shift.add(position + _shift);\n\n          _shift++;\n        } while (_shift < shiftStep);\n      } else if (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3) || !(result.indexOf('.') >= position && position > 3) && shiftStep <= 0) {\n        this._shift.clear();\n\n        backspaceShift = true;\n        shift = shiftStep; // eslint-disable-next-line no-param-reassign\n\n        position += shiftStep;\n\n        this._shift.add(position);\n      } else {\n        this._shift.clear();\n      }\n    } else {\n      for ( // eslint-disable-next-line\n      let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i]) {\n        if (cursor === maskExpression.length) {\n          break;\n        }\n\n        if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n          result += inputSymbol;\n          cursor += 2;\n        } else if (maskExpression[cursor + 1] === '*' && multi && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n          result += inputSymbol;\n          cursor += 3;\n          multi = false;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n          result += inputSymbol;\n          multi = true;\n        } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n          result += inputSymbol;\n          cursor += 3;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n          if (maskExpression[cursor] === 'H') {\n            if (Number(inputSymbol) > 2) {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === 'h') {\n            if (result === '2' && Number(inputSymbol) > 3) {\n              cursor += 1;\n              i--;\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === 'm') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === 's') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          const daysCount = 31;\n\n          if (maskExpression[cursor] === 'd') {\n            if (Number(inputSymbol) > 3 && this.leadZeroDateTime || Number(inputValue.slice(cursor, cursor + 2)) > daysCount || inputValue[cursor + 1] === '/') {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === 'M') {\n            const monthsCount = 12; // mask without day\n\n            const withoutDays = cursor === 0 && (Number(inputSymbol) > 2 || Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/'); // day<10 && month<12 for input\n\n            const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') && (inputValue[cursor - 2] === '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount && inputValue[cursor] !== '/' || inputValue[cursor] === '/' || inputValue[cursor - 3] === '/' && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount && inputValue[cursor - 1] !== '/' || inputValue[cursor - 1] === '/'); // 10<day<31 && month<12 for input\n\n            const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] === '/' && (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/'); // day<10 && month<12 for paste whole data\n\n            const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && !inputValue.slice(cursor - 2, cursor).includes('/') && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount; // 10<day<31 && month<12 for paste whole data\n\n            const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] !== '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n\n            if (Number(inputSymbol) > 1 && this.leadZeroDateTime || withoutDays || day1monthInput || day2monthInput || day1monthPaste || day2monthPaste) {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          result += inputSymbol;\n          cursor++;\n        } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n          result += maskExpression[cursor];\n          cursor++;\n\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n\n          i--;\n        } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 && this.maskAvailablePatterns[maskExpression[cursor]] && this.maskAvailablePatterns[maskExpression[cursor]]?.optional) {\n          if (!!inputArray[cursor] && maskExpression !== '099.099.099.099' && maskExpression !== '000.000.000-00' && maskExpression !== '00.000.000/0000-00' && !maskExpression.match(/^9+\\.0+$/)) {\n            result += inputArray[cursor];\n          }\n\n          cursor++;\n          i--;\n        } else if (this.maskExpression[cursor + 1] === '*' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.maskExpression[cursor + 1] === '?' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.showMaskTyped && this.maskSpecialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter) {\n          stepBack = true;\n        }\n      }\n    }\n\n    if (result.length + 1 === maskExpression.length && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n\n    let newPosition = position + 1;\n\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n\n    let actualShift = justPasted && !maskExpression.startsWith('separator') ? cursor : this._shift.has(position) ? shift : 0;\n\n    if (stepBack) {\n      actualShift--;\n    }\n\n    cb(actualShift, backspaceShift);\n\n    if (shift < 0) {\n      this._shift.clear();\n    }\n\n    let onlySpecial = false;\n\n    if (backspaced) {\n      onlySpecial = inputArray.every(char => this.maskSpecialCharacters.includes(char));\n    }\n\n    let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n\n    if (result.length === 0) {\n      res = `${this.prefix}${result}`;\n    }\n\n    return res;\n  }\n\n  _findSpecialChar(inputSymbol) {\n    return this.maskSpecialCharacters.find(val => val === inputSymbol);\n  }\n\n  _checkSymbolMask(inputSymbol, maskSymbol) {\n    this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n    return this.maskAvailablePatterns[maskSymbol] && this.maskAvailablePatterns[maskSymbol].pattern && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n  }\n\n  _stripToDecimal(str) {\n    return str.split('').filter((i, idx) => {\n      return i.match('^-?\\\\d') || i.match('\\\\s') || i === '.' || i === ',' || i === '-' && idx === 0 && this.allowNegativeNumbers;\n    }).join('');\n  }\n\n  _charToRegExpExpression(char) {\n    // if (Array.isArray(char)) {\n    // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n    // }\n    if (char) {\n      const charsToEscape = '[\\\\^$.|?*+()';\n      return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n    }\n\n    return char;\n  }\n\n  _shiftStep(maskExpression, cursor, inputLength) {\n    const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n\n    this._shift.add(shiftStep + this.prefix.length || 0);\n  }\n\n  _compareOrIncludes(value, comparedValue, excludedValue) {\n    return Array.isArray(comparedValue) ? comparedValue.filter(v => v !== excludedValue).includes(value) : value === comparedValue;\n  }\n\n}\n\nMaskApplierService.ɵfac = function MaskApplierService_Factory(t) {\n  return new (t || MaskApplierService)(i0.ɵɵinject(config));\n};\n\nMaskApplierService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MaskApplierService,\n  factory: MaskApplierService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaskApplierService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }];\n  }, null);\n})();\n\nclass MaskService extends MaskApplierService {\n  constructor(document, _config, _elementRef, _renderer) {\n    super(_config);\n    this.document = document;\n    this._config = _config;\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this.maskExpression = '';\n    this.isNumberValue = false;\n    this.placeHolderCharacter = '_';\n    this.maskIsShown = '';\n    this.selStart = null;\n    this.selEnd = null;\n    /**\n     * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n     * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n     */\n\n    this.writingValue = false;\n    this.maskChanged = false;\n    this.triggerOnMaskChange = false;\n\n    this.onChange = _ => {};\n  } // eslint-disable-next-line complexity\n\n\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => {}) {\n    if (!maskExpression) {\n      return inputValue !== this.actualValue ? this.actualValue : inputValue;\n    }\n\n    this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n\n    if (this.maskExpression === 'IP' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n\n    if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n\n    if (!inputValue && this.showMaskTyped) {\n      this.formControlResult(this.prefix);\n      return this.prefix + this.maskIsShown;\n    }\n\n    const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n    let newInputValue = '';\n\n    if (this.hiddenInput && !this.writingValue) {\n      let actualResult = this.actualValue.split(''); // eslint-disable  @typescript-eslint/no-unused-expressions\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n      inputValue !== '' && actualResult.length ? typeof this.selStart === 'number' && typeof this.selEnd === 'number' ? inputValue.length > actualResult.length ? actualResult.splice(this.selStart, 0, getSymbol) : inputValue.length < actualResult.length ? actualResult.length - inputValue.length === 1 ? actualResult.splice(this.selStart - 1, 1) : actualResult.splice(this.selStart, this.selEnd - this.selStart) : null : null : actualResult = [];\n\n      if (this.showMaskTyped) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this.removeMask(inputValue);\n      } // eslint-enable  @typescript-eslint/no-unused-expressions\n\n\n      newInputValue = this.actualValue.length && actualResult.length <= inputValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n    }\n\n    newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n    const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n    this.actualValue = this.getActualValue(result); // handle some separator implications:\n    // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n\n    if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n      this.decimalMarker = ',';\n    } // b) remove decimal marker from list of special characters to mask\n\n\n    if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n      this.maskSpecialCharacters = this.maskSpecialCharacters.filter(item => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator));\n    }\n\n    this.formControlResult(result);\n\n    if (!this.showMaskTyped) {\n      if (this.hiddenInput) {\n        return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n      }\n\n      return result;\n    }\n\n    const resLen = result.length;\n    const prefNmask = this.prefix + this.maskIsShown;\n\n    if (this.maskExpression.includes('H')) {\n      const countSkipedSymbol = this._numberSkipedSymbols(result);\n\n      return result + prefNmask.slice(resLen + countSkipedSymbol);\n    } else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n      return result + prefNmask;\n    }\n\n    return result + prefNmask.slice(resLen);\n  } // get the number of characters that were shifted\n\n\n  _numberSkipedSymbols(value) {\n    const regex = /(^|\\D)(\\d\\D)/g;\n    let match = regex.exec(value);\n    let countSkipedSymbol = 0;\n\n    while (match != null) {\n      countSkipedSymbol += 1;\n      match = regex.exec(value);\n    }\n\n    return countSkipedSymbol;\n  }\n\n  applyValueChanges(position, justPasted, backspaced, cb = () => {}) {\n    const formElement = this._elementRef.nativeElement;\n    formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n\n    if (formElement === this._getActiveElement()) {\n      return;\n    }\n\n    this.clearIfNotMatchFn();\n  }\n\n  hideInput(inputValue, maskExpression) {\n    return inputValue.split('').map((curr, index) => {\n      if (this.maskAvailablePatterns && this.maskAvailablePatterns[maskExpression[index]] && this.maskAvailablePatterns[maskExpression[index]]?.symbol) {\n        return this.maskAvailablePatterns[maskExpression[index]]?.symbol;\n      }\n\n      return curr;\n    }).join('');\n  } // this function is not necessary, it checks result against maskExpression\n\n\n  getActualValue(res) {\n    const compare = res.split('').filter((symbol, i) => this._checkSymbolMask(symbol, this.maskExpression[i]) || this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i]);\n\n    if (compare.join('') === res) {\n      return compare.join('');\n    }\n\n    return res;\n  }\n\n  shiftTypedSymbols(inputValue) {\n    let symbolToReplace = '';\n    const newInputValue = inputValue && inputValue.split('').map((currSymbol, index) => {\n      if (this.maskSpecialCharacters.includes(inputValue[index + 1]) && inputValue[index + 1] !== this.maskExpression[index + 1]) {\n        symbolToReplace = currSymbol;\n        return inputValue[index + 1];\n      }\n\n      if (symbolToReplace.length) {\n        const replaceSymbol = symbolToReplace;\n        symbolToReplace = '';\n        return replaceSymbol;\n      }\n\n      return currSymbol;\n    }) || [];\n    return newInputValue.join('');\n  }\n  /**\n   * Convert number value to string\n   * 3.1415 -> '3.1415'\n   * 1e-7 -> '0.0000001'\n   */\n\n\n  numberToString(value) {\n    if (!value && value !== 0) {\n      return String(value);\n    }\n\n    return Number(value).toLocaleString('fullwide', {\n      useGrouping: false,\n      maximumFractionDigits: 20\n    });\n  }\n\n  showMaskInInput(inputVal) {\n    if (this.showMaskTyped && !!this.shownMaskExpression) {\n      if (this.maskExpression.length !== this.shownMaskExpression.length) {\n        throw new Error('Mask expression must match mask placeholder length');\n      } else {\n        return this.shownMaskExpression;\n      }\n    } else if (this.showMaskTyped) {\n      if (inputVal) {\n        if (this.maskExpression === 'IP') {\n          return this._checkForIp(inputVal);\n        }\n\n        if (this.maskExpression === 'CPF_CNPJ') {\n          return this._checkForCpfCnpj(inputVal);\n        }\n      }\n\n      return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n    }\n\n    return '';\n  }\n\n  clearIfNotMatchFn() {\n    const formElement = this._elementRef.nativeElement;\n\n    if (this.clearIfNotMatch && this.prefix.length + this.maskExpression.length + this.suffix.length !== formElement.value.replace(/_/g, '').length) {\n      this.formElementProperty = ['value', ''];\n      this.applyMask(formElement.value, this.maskExpression);\n    }\n  }\n\n  set formElementProperty([name, value]) {\n    Promise.resolve().then(() => this._renderer.setProperty(this._elementRef.nativeElement, name, value));\n  }\n\n  checkSpecialCharAmount(mask) {\n    const chars = mask.split('').filter(item => this._findSpecialChar(item));\n    return chars.length;\n  }\n\n  removeMask(inputValue) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));\n  }\n\n  _checkForIp(inputVal) {\n    if (inputVal === '#') {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputVal.length; i++) {\n      if (inputVal[i]?.match('\\\\d')) {\n        arr.push(inputVal[i]);\n      }\n    }\n\n    if (arr.length <= 3) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    if (arr.length > 3 && arr.length <= 6) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    if (arr.length > 6 && arr.length <= 9) {\n      return this.placeHolderCharacter;\n    }\n\n    if (arr.length > 9 && arr.length <= 12) {\n      return '';\n    }\n\n    return '';\n  }\n\n  _checkForCpfCnpj(inputVal) {\n    const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n\n    if (inputVal === '#') {\n      return cpf;\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputVal.length; i++) {\n      if (inputVal[i]?.match('\\\\d')) {\n        arr.push(inputVal[i]);\n      }\n    }\n\n    if (arr.length <= 3) {\n      return cpf.slice(arr.length, cpf.length);\n    }\n\n    if (arr.length > 3 && arr.length <= 6) {\n      return cpf.slice(arr.length + 1, cpf.length);\n    }\n\n    if (arr.length > 6 && arr.length <= 9) {\n      return cpf.slice(arr.length + 2, cpf.length);\n    }\n\n    if (arr.length > 9 && arr.length < 11) {\n      return cpf.slice(arr.length + 3, cpf.length);\n    }\n\n    if (arr.length === 11) {\n      return '';\n    }\n\n    if (arr.length === 12) {\n      if (inputVal.length === 17) {\n        return cnpj.slice(16, cnpj.length);\n      }\n\n      return cnpj.slice(15, cnpj.length);\n    }\n\n    if (arr.length > 12 && arr.length <= 14) {\n      return cnpj.slice(arr.length + 4, cnpj.length);\n    }\n\n    return '';\n  }\n  /**\n   * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n   */\n\n\n  _getActiveElement(document = this.document) {\n    const shadowRootEl = document?.activeElement?.shadowRoot;\n\n    if (!shadowRootEl?.activeElement) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n  /**\n   * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n   * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n   * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n   * model value too. Therefore, we don't trigger onChange in this scenario.\n   * @param inputValue the current form input value\n   */\n\n\n  formControlResult(inputValue) {\n    if (this.writingValue || !this.triggerOnMaskChange && this.maskChanged) {\n      this.maskChanged = false;\n      return;\n    }\n\n    if (Array.isArray(this.dropSpecialCharacters)) {\n      this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n    } else if (this.dropSpecialCharacters) {\n      this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n    } else {\n      this.onChange(this._removeSuffix(inputValue));\n    }\n  }\n\n  _toNumber(value) {\n    if (!this.isNumberValue || value === '') {\n      return value;\n    }\n\n    const num = Number(value);\n    return Number.isNaN(num) ? value : num;\n  }\n\n  _removeMask(value, specialCharactersForRemove) {\n    return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n  }\n\n  _removePrefix(value) {\n    if (!this.prefix) {\n      return value;\n    }\n\n    return value ? value.replace(this.prefix, '') : value;\n  }\n\n  _removeSuffix(value) {\n    if (!this.suffix) {\n      return value;\n    }\n\n    return value ? value.replace(this.suffix, '') : value;\n  }\n\n  _retrieveSeparatorValue(result) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n  }\n\n  _regExpForRemove(specialCharactersForRemove) {\n    return new RegExp(specialCharactersForRemove.map(item => `\\\\${item}`).join('|'), 'gi');\n  }\n\n  _checkSymbols(result) {\n    if (result === '') {\n      return result;\n    }\n\n    const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n\n    let separatorValue = this._retrieveSeparatorValue(result);\n\n    if (this.decimalMarker !== '.' && !Array.isArray(this.decimalMarker)) {\n      separatorValue = separatorValue.replace(this.decimalMarker, '.');\n    }\n\n    if (!this.isNumberValue) {\n      return separatorValue;\n    }\n\n    if (separatorPrecision) {\n      if (result === this.decimalMarker) {\n        return null;\n      }\n\n      return this._checkPrecision(this.maskExpression, separatorValue);\n    } else {\n      return Number(separatorValue);\n    }\n  } // TODO should think about helpers or separting decimal precision to own property\n\n\n  _retrieveSeparatorPrecision(maskExpretion) {\n    const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n    return matcher ? Number(matcher[1]) : null;\n  }\n\n  _checkPrecision(separatorExpression, separatorValue) {\n    if (separatorExpression.indexOf('2') > 0) {\n      return Number(separatorValue).toFixed(2);\n    }\n\n    return Number(separatorValue);\n  }\n\n}\n\nMaskService.ɵfac = function MaskService_Factory(t) {\n  return new (t || MaskService)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(config), i0.ɵɵinject(i0.ElementRef), i0.ɵɵinject(i0.Renderer2));\n};\n\nMaskService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MaskService,\n  factory: MaskService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaskService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, null);\n})();\n\nclass MaskDirective {\n  constructor(document, _maskService, _config) {\n    this.document = document;\n    this._maskService = _maskService;\n    this._config = _config; // eslint-disable-next-line @angular-eslint/no-input-rename\n\n    this.maskExpression = '';\n    this.specialCharacters = [];\n    this.patterns = {};\n    this.prefix = '';\n    this.suffix = '';\n    this.thousandSeparator = ' ';\n    this.decimalMarker = '.';\n    this.dropSpecialCharacters = null;\n    this.hiddenInput = null;\n    this.showMaskTyped = null;\n    this.placeHolderCharacter = null;\n    this.shownMaskExpression = null;\n    this.showTemplate = null;\n    this.clearIfNotMatch = null;\n    this.validation = null;\n    this.separatorLimit = null;\n    this.allowNegativeNumbers = null;\n    this.leadZeroDateTime = null;\n    this.triggerOnMaskChange = null;\n    this.maskFilled = new EventEmitter();\n    this._maskValue = '';\n    this._position = null;\n    this._maskExpressionArray = [];\n    this._justPasted = false;\n\n    this.onChange = _ => {};\n\n    this.onTouch = () => {};\n  }\n\n  ngOnChanges(changes) {\n    const {\n      maskExpression,\n      specialCharacters,\n      patterns,\n      prefix,\n      suffix,\n      thousandSeparator,\n      decimalMarker,\n      dropSpecialCharacters,\n      hiddenInput,\n      showMaskTyped,\n      placeHolderCharacter,\n      shownMaskExpression,\n      showTemplate,\n      clearIfNotMatch,\n      validation,\n      separatorLimit,\n      allowNegativeNumbers,\n      leadZeroDateTime,\n      triggerOnMaskChange\n    } = changes;\n\n    if (maskExpression) {\n      if (maskExpression.currentValue !== maskExpression.previousValue && !maskExpression.firstChange) {\n        this._maskService.maskChanged = true;\n      }\n\n      if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n        this._maskExpressionArray = maskExpression.currentValue.split('||').sort((a, b) => {\n          return a.length - b.length;\n        });\n\n        this._setMask();\n      } else {\n        this._maskExpressionArray = [];\n        this._maskValue = maskExpression.currentValue || '';\n        this._maskService.maskExpression = this._maskValue;\n      }\n    }\n\n    if (specialCharacters) {\n      if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n        return;\n      } else {\n        this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n      }\n    } // Only overwrite the mask available patterns if a pattern has actually been passed in\n\n\n    if (patterns && patterns.currentValue) {\n      this._maskService.maskAvailablePatterns = patterns.currentValue;\n    }\n\n    if (prefix) {\n      this._maskService.prefix = prefix.currentValue;\n    }\n\n    if (suffix) {\n      this._maskService.suffix = suffix.currentValue;\n    }\n\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator.currentValue;\n    }\n\n    if (decimalMarker) {\n      this._maskService.decimalMarker = decimalMarker.currentValue;\n    }\n\n    if (dropSpecialCharacters) {\n      this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n    }\n\n    if (hiddenInput) {\n      this._maskService.hiddenInput = hiddenInput.currentValue;\n    }\n\n    if (showMaskTyped) {\n      this._maskService.showMaskTyped = showMaskTyped.currentValue;\n    }\n\n    if (placeHolderCharacter) {\n      this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n    }\n\n    if (shownMaskExpression) {\n      this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n    }\n\n    if (showTemplate) {\n      this._maskService.showTemplate = showTemplate.currentValue;\n    }\n\n    if (clearIfNotMatch) {\n      this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n    }\n\n    if (validation) {\n      this._maskService.validation = validation.currentValue;\n    }\n\n    if (separatorLimit) {\n      this._maskService.separatorLimit = separatorLimit.currentValue;\n    }\n\n    if (allowNegativeNumbers) {\n      this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n\n      if (this._maskService.allowNegativeNumbers) {\n        this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter(c => c !== '-');\n      }\n    }\n\n    if (leadZeroDateTime) {\n      this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n    }\n\n    if (triggerOnMaskChange) {\n      this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n    }\n\n    this._applyMask();\n  } // eslint-disable-next-line complexity\n\n\n  validate({\n    value\n  }) {\n    if (!this._maskService.validation || !this._maskValue) {\n      return null;\n    }\n\n    if (this._maskService.ipError) {\n      return this._createValidationError(value);\n    }\n\n    if (this._maskService.cpfCnpjError) {\n      return this._createValidationError(value);\n    }\n\n    if (this._maskValue.startsWith('separator')) {\n      return null;\n    }\n\n    if (withoutValidation.includes(this._maskValue)) {\n      return null;\n    }\n\n    if (this._maskService.clearIfNotMatch) {\n      return null;\n    }\n\n    if (timeMasks.includes(this._maskValue)) {\n      return this._validateTime(value);\n    }\n\n    if (value && value.toString().length >= 1) {\n      let counterOfOpt = 0;\n\n      for (const key in this._maskService.maskAvailablePatterns) {\n        if (this._maskService.maskAvailablePatterns[key].optional) {\n          if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n            const opt = this._maskValue.split('').filter(i => i === key).join('');\n\n            counterOfOpt += opt.length;\n          } else if (this._maskValue.indexOf(key) !== -1) {\n            counterOfOpt++;\n          }\n\n          if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n            return null;\n          }\n\n          if (counterOfOpt === this._maskValue.length) {\n            return null;\n          }\n        }\n      }\n\n      if (this._maskValue.indexOf('{') === 1 && value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4) {\n        return null;\n      }\n\n      if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n        return null;\n      } else if (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*') || this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?') || this._maskValue.indexOf('{') === 1) {\n        return this._createValidationError(value);\n      }\n\n      if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n        const length = this._maskService.dropSpecialCharacters ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt : this._maskValue.length - counterOfOpt;\n\n        if (value.toString().length < length) {\n          return this._createValidationError(value);\n        }\n      }\n    }\n\n    if (value) {\n      this.maskFilled.emit();\n      return null;\n    }\n\n    return null;\n  }\n\n  onPaste() {\n    this._justPasted = true;\n  }\n\n  onModelChange(value) {\n    // on form reset we need to update the actualValue\n    if ((value === '' || value === null || value === undefined) && this._maskService.actualValue) {\n      this._maskService.actualValue = this._maskService.getActualValue('');\n    }\n  }\n\n  onInput(e) {\n    const el = e.target;\n    this._inputValue = el.value;\n\n    this._setMask();\n\n    if (!this._maskValue) {\n      this.onChange(el.value);\n      return;\n    }\n\n    const position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n    let caretShift = 0;\n    let backspaceShift = false;\n\n    this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace' || this._code === 'Delete', (shift, _backspaceShift) => {\n      this._justPasted = false;\n      caretShift = shift;\n      backspaceShift = _backspaceShift;\n    }); // only set the selection if the element is active\n\n\n    if (this._getActiveElement() !== el) {\n      return;\n    }\n\n    this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n    let positionToApply = this._position ? this._inputValue.length + position + caretShift : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n\n    if (positionToApply > this._getActualInputLength()) {\n      positionToApply = this._getActualInputLength();\n    }\n\n    if (positionToApply < 0) {\n      positionToApply = 0;\n    }\n\n    el.setSelectionRange(positionToApply, positionToApply);\n    this._position = null;\n  }\n\n  onBlur() {\n    if (this._maskValue) {\n      this._maskService.clearIfNotMatchFn();\n    }\n\n    this.onTouch();\n  }\n\n  onClick(e) {\n    if (!this._maskValue) {\n      return;\n    }\n\n    const el = e.target;\n    const posStart = 0;\n    const posEnd = 0;\n\n    if (el !== null && el.selectionStart !== null && el.selectionStart === el.selectionEnd && el.selectionStart > this._maskService.prefix.length && // eslint-disable-next-line\n    e.keyCode !== 38) {\n      if (this._maskService.showMaskTyped) {\n        // We are showing the mask in the input\n        this._maskService.maskIsShown = this._maskService.showMaskInInput();\n\n        if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n          // the input ONLY contains the mask, so position the cursor at the start\n          el.focus();\n          el.setSelectionRange(posStart, posEnd);\n        } else {\n          // the input contains some characters already\n          if (el.selectionStart > this._maskService.actualValue.length) {\n            // if the user clicked beyond our value's length, position the cursor at the end of our value\n            el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n          }\n        }\n      }\n    }\n\n    const nextValue = !el.value || el.value === this._maskService.prefix ? this._maskService.prefix + this._maskService.maskIsShown : el.value;\n    /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n\n    if (el.value !== nextValue) {\n      el.value = nextValue;\n    }\n    /** fix of cursor position with prefix when mouse click occur */\n\n\n    if ((el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n    /** select only inserted text */\n\n\n    if (el.selectionEnd > this._getActualInputLength()) {\n      el.selectionEnd = this._getActualInputLength();\n    }\n  } // eslint-disable-next-line complexity\n\n\n  onKeyDown(e) {\n    if (!this._maskValue) {\n      return;\n    }\n\n    this._code = e.code ? e.code : e.key;\n    const el = e.target;\n    this._inputValue = el.value;\n\n    this._setMask();\n\n    if (e.keyCode === 38) {\n      e.preventDefault();\n    }\n\n    if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n      if (e.keyCode === 8 && el.value.length === 0) {\n        el.selectionStart = el.selectionEnd;\n      }\n\n      if (e.keyCode === 8 && el.selectionStart !== 0) {\n        // If specialChars is false, (shouldn't ever happen) then set to the defaults\n        this.specialCharacters = this.specialCharacters?.length ? this.specialCharacters : this._config.specialCharacters;\n\n        if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n          el.setSelectionRange(this.prefix.length, el.selectionEnd);\n        } else {\n          if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n            while (this.specialCharacters.includes(this._inputValue[el.selectionStart - 1].toString()) && (this.prefix.length >= 1 && el.selectionStart > this.prefix.length || this.prefix.length === 0)) {\n              el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n            }\n          }\n        }\n      }\n\n      this.checkSelectionOnDeletion(el);\n\n      if (this._maskService.prefix.length && el.selectionStart <= this._maskService.prefix.length && el.selectionEnd <= this._maskService.prefix.length) {\n        e.preventDefault();\n      }\n\n      const cursorStart = el.selectionStart;\n\n      if (e.keyCode === 8 && !el.readOnly && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n\n        this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n      }\n    }\n\n    if (!!this.suffix && this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n      el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n    } else if (e.keyCode === 65 && e.ctrlKey || e.keyCode === 65 && e.metaKey // Cmd + A (Mac)\n    ) {\n      el.setSelectionRange(0, this._getActualInputLength());\n      e.preventDefault();\n    }\n\n    this._maskService.selStart = el.selectionStart;\n    this._maskService.selEnd = el.selectionEnd;\n  }\n  /** It writes the value in the input */\n\n\n  writeValue(inputValue) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n        if ('disable' in inputValue) {\n          _this.setDisabledState(Boolean(inputValue.disable));\n        } // eslint-disable-next-line no-param-reassign\n\n\n        inputValue = inputValue.value;\n      }\n\n      if (typeof inputValue === 'number' || _this._maskValue.startsWith('separator')) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = _this._maskService.numberToString(inputValue);\n\n        if (!Array.isArray(_this.decimalMarker)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = _this.decimalMarker !== '.' ? inputValue.replace('.', _this.decimalMarker) : inputValue;\n        }\n\n        _this._maskService.isNumberValue = true;\n      }\n\n      if (typeof inputValue !== 'string') {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = '';\n      }\n\n      _this._inputValue = inputValue;\n\n      _this._setMask();\n\n      if (inputValue && _this._maskService.maskExpression || _this._maskService.maskExpression && (_this._maskService.prefix || _this._maskService.showMaskTyped)) {\n        // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n        _this._maskService.writingValue = true;\n        _this._maskService.formElementProperty = ['value', _this._maskService.applyMask(inputValue, _this._maskService.maskExpression)]; // Let the service know we've finished writing value\n\n        _this._maskService.writingValue = false;\n      } else {\n        _this._maskService.formElementProperty = ['value', inputValue];\n      }\n\n      _this._inputValue = inputValue;\n    })();\n  }\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n    this._maskService.onChange = this.onChange;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouch = fn;\n  }\n\n  _getActiveElement(document = this.document) {\n    const shadowRootEl = document?.activeElement?.shadowRoot;\n\n    if (!shadowRootEl?.activeElement) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n\n  checkSelectionOnDeletion(el) {\n    el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n    el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n  }\n  /** It disables the input element */\n\n\n  setDisabledState(isDisabled) {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  }\n\n  _repeatPatternSymbols(maskExp) {\n    return maskExp.match(/{[0-9]+}/) && maskExp.split('').reduce((accum, currval, index) => {\n      this._start = currval === '{' ? index : this._start;\n\n      if (currval !== '}') {\n        return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n      }\n\n      this._end = index;\n      const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n      const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n      return accum + replaceWith;\n    }, '') || maskExp;\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  _applyMask() {\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n    this._maskService.formElementProperty = ['value', this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)];\n  }\n\n  _validateTime(value) {\n    const rowMaskLen = this._maskValue.split('').filter(s => s !== ':').length;\n\n    if (!value) {\n      return null; // Don't validate empty values to allow for optional form control\n    }\n\n    if (+value[value.length - 1] === 0 && value.length < rowMaskLen || value.length <= rowMaskLen - 2) {\n      return this._createValidationError(value);\n    }\n\n    return null;\n  }\n\n  _getActualInputLength() {\n    return this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length;\n  }\n\n  _createValidationError(actualValue) {\n    return {\n      mask: {\n        requiredMask: this._maskValue,\n        actualValue\n      }\n    };\n  }\n\n  _setMask() {\n    if (this._maskExpressionArray.length > 0) {\n      this._maskExpressionArray.some(mask => {\n        const test = this._maskService.removeMask(this._inputValue)?.length <= this._maskService.removeMask(mask)?.length;\n\n        if (this._inputValue && test) {\n          this._maskValue = mask;\n          this.maskExpression = mask;\n          this._maskService.maskExpression = mask;\n          return test;\n        } else {\n          this._maskValue = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n          this.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n          this._maskService.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n        }\n      });\n    }\n  }\n\n}\n\nMaskDirective.ɵfac = function MaskDirective_Factory(t) {\n  return new (t || MaskDirective)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(MaskService), i0.ɵɵdirectiveInject(config));\n};\n\nMaskDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MaskDirective,\n  selectors: [[\"input\", \"mask\", \"\"], [\"textarea\", \"mask\", \"\"]],\n  hostBindings: function MaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"paste\", function MaskDirective_paste_HostBindingHandler() {\n        return ctx.onPaste();\n      })(\"ngModelChange\", function MaskDirective_ngModelChange_HostBindingHandler($event) {\n        return ctx.onModelChange($event);\n      })(\"input\", function MaskDirective_input_HostBindingHandler($event) {\n        return ctx.onInput($event);\n      })(\"blur\", function MaskDirective_blur_HostBindingHandler() {\n        return ctx.onBlur();\n      })(\"click\", function MaskDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown\", function MaskDirective_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  },\n  inputs: {\n    maskExpression: [\"mask\", \"maskExpression\"],\n    specialCharacters: \"specialCharacters\",\n    patterns: \"patterns\",\n    prefix: \"prefix\",\n    suffix: \"suffix\",\n    thousandSeparator: \"thousandSeparator\",\n    decimalMarker: \"decimalMarker\",\n    dropSpecialCharacters: \"dropSpecialCharacters\",\n    hiddenInput: \"hiddenInput\",\n    showMaskTyped: \"showMaskTyped\",\n    placeHolderCharacter: \"placeHolderCharacter\",\n    shownMaskExpression: \"shownMaskExpression\",\n    showTemplate: \"showTemplate\",\n    clearIfNotMatch: \"clearIfNotMatch\",\n    validation: \"validation\",\n    separatorLimit: \"separatorLimit\",\n    allowNegativeNumbers: \"allowNegativeNumbers\",\n    leadZeroDateTime: \"leadZeroDateTime\",\n    triggerOnMaskChange: \"triggerOnMaskChange\"\n  },\n  outputs: {\n    maskFilled: \"maskFilled\"\n  },\n  exportAs: [\"mask\", \"ngxMask\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MaskDirective),\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaskDirective),\n    multi: true\n  }, MaskService]), i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'input[mask], textarea[mask]',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => MaskDirective),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => MaskDirective),\n        multi: true\n      }, MaskService],\n      exportAs: 'mask,ngxMask'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MaskService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }];\n  }, {\n    maskExpression: [{\n      type: Input,\n      args: ['mask']\n    }],\n    specialCharacters: [{\n      type: Input\n    }],\n    patterns: [{\n      type: Input\n    }],\n    prefix: [{\n      type: Input\n    }],\n    suffix: [{\n      type: Input\n    }],\n    thousandSeparator: [{\n      type: Input\n    }],\n    decimalMarker: [{\n      type: Input\n    }],\n    dropSpecialCharacters: [{\n      type: Input\n    }],\n    hiddenInput: [{\n      type: Input\n    }],\n    showMaskTyped: [{\n      type: Input\n    }],\n    placeHolderCharacter: [{\n      type: Input\n    }],\n    shownMaskExpression: [{\n      type: Input\n    }],\n    showTemplate: [{\n      type: Input\n    }],\n    clearIfNotMatch: [{\n      type: Input\n    }],\n    validation: [{\n      type: Input\n    }],\n    separatorLimit: [{\n      type: Input\n    }],\n    allowNegativeNumbers: [{\n      type: Input\n    }],\n    leadZeroDateTime: [{\n      type: Input\n    }],\n    triggerOnMaskChange: [{\n      type: Input\n    }],\n    maskFilled: [{\n      type: Output\n    }],\n    onPaste: [{\n      type: HostListener,\n      args: ['paste']\n    }],\n    onModelChange: [{\n      type: HostListener,\n      args: ['ngModelChange', ['$event']]\n    }],\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event']]\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\n\nclass MaskPipe {\n  constructor(_maskService) {\n    this._maskService = _maskService;\n  }\n\n  transform(value, mask, thousandSeparator = null) {\n    if (!value && typeof value !== 'number') {\n      return '';\n    }\n\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator;\n    }\n\n    if (typeof mask === 'string') {\n      return this._maskService.applyMask(`${value}`, mask);\n    }\n\n    return this._maskService.applyMaskWithPattern(`${value}`, mask);\n  }\n\n}\n\nMaskPipe.ɵfac = function MaskPipe_Factory(t) {\n  return new (t || MaskPipe)(i0.ɵɵdirectiveInject(MaskApplierService, 16));\n};\n\nMaskPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"mask\",\n  type: MaskPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaskPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'mask',\n      pure: true\n    }]\n  }], function () {\n    return [{\n      type: MaskApplierService\n    }];\n  }, null);\n})();\n/**\n * @internal\n */\n\n\nfunction _configFactory(initConfig, configValue) {\n  return configValue instanceof Function ? { ...initConfig,\n    ...configValue()\n  } : { ...initConfig,\n    ...configValue\n  };\n}\n\nclass NgxMaskModule {\n  static forRoot(configValue) {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [{\n        provide: NEW_CONFIG,\n        useValue: configValue\n      }, {\n        provide: INITIAL_CONFIG,\n        useValue: initialConfig\n      }, {\n        provide: config,\n        useFactory: _configFactory,\n        deps: [INITIAL_CONFIG, NEW_CONFIG]\n      }, MaskApplierService]\n    };\n  }\n\n  static forChild() {\n    return {\n      ngModule: NgxMaskModule\n    };\n  }\n\n}\n\nNgxMaskModule.ɵfac = function NgxMaskModule_Factory(t) {\n  return new (t || NgxMaskModule)();\n};\n\nNgxMaskModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMaskModule\n});\nNgxMaskModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskModule, [{\n    type: NgModule,\n    args: [{\n      exports: [MaskDirective, MaskPipe],\n      declarations: [MaskDirective, MaskPipe]\n    }]\n  }], null, null);\n})();\n\nconst commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n(function () {\n  if (!commonjsGlobal.KeyboardEvent) {\n    commonjsGlobal.KeyboardEvent = function (_eventType, _init) {};\n  }\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation }; //# sourceMappingURL=ngx-mask.mjs.map","map":{"version":3,"sources":["E:/UNIVESP/PI2022/Front-End/univesp-frontend/node_modules/ngx-mask/fesm2020/ngx-mask.mjs"],"names":["i0","InjectionToken","EventEmitter","Injectable","Inject","forwardRef","Directive","Input","Output","HostListener","Pipe","NgModule","NG_VALUE_ACCESSOR","NG_VALIDATORS","DOCUMENT","config","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","leadZeroDateTime","triggerOnMaskChange","maskFilled","patterns","pattern","RegExp","optional","X","symbol","A","S","U","L","d","m","M","H","h","s","timeMasks","withoutValidation","MaskApplierService","constructor","_config","maskExpression","actualValue","_formatWithSeparators","str","thousandSeparatorChar","decimalChars","precision","x","decimalChar","Array","isArray","regExp","map","v","indexOf","join","split","match","decimals","length","res","replace","slice","rgx","test","substr","percentage","Number","getPrecision","Infinity","checkAndRemoveSuffix","inputValue","i","includes","checkInputPrecision","marker","find","dm","precisionRegEx","_charToRegExpExpression","precisionMatch","diff","substring","_compareOrIncludes","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","applyMaskWithPattern","maskAndPattern","mask","customPattern","applyMask","position","justPasted","backspaced","cb","cursor","result","multi","backspaceShift","shift","stepBack","inputArray","toString","ipError","filter","arr","push","cpfCnpjError","startsWith","_stripToDecimal","base","thousandSeparatorCharEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","_checkSymbolMask","_shiftStep","daysCount","monthsCount","withoutDays","day1monthInput","day2monthInput","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","onlySpecial","every","char","val","maskSymbol","idx","charsToEscape","inputLength","value","comparedValue","excludedValue","ɵfac","ɵprov","type","decorators","args","MaskService","document","_elementRef","_renderer","isNumberValue","maskIsShown","selStart","selEnd","writingValue","maskChanged","onChange","_","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","removeMask","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","countSkipedSymbol","_numberSkipedSymbols","regex","exec","applyValueChanges","formElement","nativeElement","_getActiveElement","clearIfNotMatchFn","curr","index","compare","symbolToReplace","currSymbol","replaceSymbol","numberToString","String","toLocaleString","useGrouping","maximumFractionDigits","inputVal","Error","_checkForIp","_checkForCpfCnpj","formElementProperty","name","Promise","resolve","then","setProperty","checkSpecialCharAmount","chars","_removeMask","_removeSuffix","_removePrefix","concat","cpf","cnpj","shadowRootEl","activeElement","shadowRoot","_toNumber","_checkSymbols","num","isNaN","specialCharactersForRemove","_regExpForRemove","_retrieveSeparatorValue","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_checkPrecision","maskExpretion","matcher","separatorExpression","toFixed","ElementRef","Renderer2","MaskDirective","_maskService","_maskValue","_position","_maskExpressionArray","_justPasted","onTouch","ngOnChanges","changes","currentValue","previousValue","firstChange","sort","a","b","_setMask","c","_applyMask","validate","_createValidationError","_validateTime","counterOfOpt","key","lastIndexOf","opt","emit","onPaste","onModelChange","onInput","e","el","target","_inputValue","selectionStart","caretShift","_code","_backspaceShift","positionToApply","_getActualInputLength","setSelectionRange","onBlur","onClick","posStart","posEnd","selectionEnd","keyCode","focus","nextValue","onKeyDown","code","preventDefault","checkSelectionOnDeletion","cursorStart","readOnly","ctrlKey","metaKey","writeValue","setDisabledState","disable","registerOnChange","fn","registerOnTouched","Math","min","max","isDisabled","_repeatPatternSymbols","maskExp","reduce","accum","currval","_start","_end","repeatNumber","replaceWith","rowMaskLen","requiredMask","some","ɵdir","provide","useExisting","selector","providers","exportAs","MaskPipe","transform","ɵpipe","pure","_configFactory","initConfig","configValue","Function","NgxMaskModule","forRoot","ngModule","useValue","useFactory","deps","forChild","ɵmod","ɵinj","exports","declarations","commonjsGlobal","globalThis","window","global","self","KeyboardEvent","_eventType","_init"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Injectable, Inject, forwardRef, Directive, Input, Output, HostListener, Pipe, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\n\nconst config = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n    suffix: '',\n    prefix: '',\n    thousandSeparator: ' ',\n    decimalMarker: ['.', ','],\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    placeHolderCharacter: '_',\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    separatorLimit: '',\n    allowNegativeNumbers: false,\n    validation: true,\n    // eslint-disable-next-line @typescript-eslint/quotes\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    leadZeroDateTime: false,\n    triggerOnMaskChange: false,\n    maskFilled: new EventEmitter(),\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        U: {\n            pattern: new RegExp('[A-Z]'),\n        },\n        L: {\n            pattern: new RegExp('[a-z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nconst withoutValidation = [\n    'percent',\n    'Hh',\n    's0',\n    'm0',\n    'separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0',\n];\n\nclass MaskApplierService {\n    constructor(_config) {\n        this._config = _config;\n        this.maskExpression = '';\n        this.actualValue = '';\n        this.shownMaskExpression = '';\n        this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n            let x = [];\n            let decimalChar = '';\n            if (Array.isArray(decimalChars)) {\n                const regExp = new RegExp(decimalChars.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|'));\n                x = str.split(regExp);\n                decimalChar = str.match(regExp)?.[0] ?? '';\n            }\n            else {\n                x = str.split(decimalChars);\n                decimalChar = decimalChars;\n            }\n            const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n            let res = x[0];\n            const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n            if (separatorLimit && +separatorLimit) {\n                if (res[0] === '-') {\n                    res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n                }\n                else {\n                    res = res.slice(0, separatorLimit.length);\n                }\n            }\n            const rgx = /(\\d+)(\\d{3})/;\n            while (thousandSeparatorChar && rgx.test(res)) {\n                res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n            }\n            if (precision === undefined) {\n                return res + decimals;\n            }\n            else if (precision === 0) {\n                return res;\n            }\n            return res + decimals.substr(0, precision + 1);\n        };\n        this.percentage = (str) => {\n            return Number(str) >= 0 && Number(str) <= 100;\n        };\n        this.getPrecision = (maskExpression) => {\n            const x = maskExpression.split('.');\n            if (x.length > 1) {\n                return Number(x[x.length - 1]);\n            }\n            return Infinity;\n        };\n        this.checkAndRemoveSuffix = (inputValue) => {\n            for (let i = this.suffix?.length - 1; i >= 0; i--) {\n                const substr = this.suffix.substr(i, this.suffix?.length);\n                if (inputValue.includes(substr) &&\n                    (i - 1 < 0 || !inputValue.includes(this.suffix.substr(i - 1, this.suffix?.length)))) {\n                    return inputValue.replace(substr, '');\n                }\n            }\n            return inputValue;\n        };\n        this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n            if (precision < Infinity) {\n                // TODO need think about decimalMarker\n                if (Array.isArray(decimalMarker)) {\n                    const marker = decimalMarker.find((dm) => dm !== this.thousandSeparator);\n                    // eslint-disable-next-line no-param-reassign\n                    decimalMarker = marker ? marker : decimalMarker[0];\n                }\n                const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n                const precisionMatch = inputValue.match(precisionRegEx);\n                if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n                    const diff = precisionMatch[0].length - 1 - precision;\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - diff);\n                }\n                if (precision === 0 &&\n                    this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            return inputValue;\n        };\n        this._shift = new Set();\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.thousandSeparator = this._config.thousandSeparator;\n        this.decimalMarker = this._config.decimalMarker;\n        this.hiddenInput = this._config.hiddenInput;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.placeHolderCharacter = this._config.placeHolderCharacter;\n        this.validation = this._config.validation;\n        this.separatorLimit = this._config.separatorLimit;\n        this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n        this.leadZeroDateTime = this._config.leadZeroDateTime;\n    }\n    applyMaskWithPattern(inputValue, maskAndPattern) {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => { }) {\n        if (!maskExpression || typeof inputValue !== 'string') {\n            return '';\n        }\n        let cursor = 0;\n        let result = '';\n        let multi = false;\n        let backspaceShift = false;\n        let shift = 1;\n        let stepBack = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        if (!!this.suffix && inputValue?.length > 0) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkAndRemoveSuffix(inputValue);\n        }\n        const inputArray = inputValue.toString().split('');\n        if (maskExpression === 'IP') {\n            this.ipError =\n                inputArray.filter((i) => i === '.').length < 3 && inputArray.length < 7;\n            // eslint-disable-next-line no-param-reassign\n            maskExpression = '099.099.099.099';\n        }\n        const arr = [];\n        for (let i = 0; i < inputValue.length; i++) {\n            if (inputValue[i]?.match('\\\\d')) {\n                arr.push(inputValue[i]);\n            }\n        }\n        if (maskExpression === 'CPF_CNPJ') {\n            this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n            if (arr.length > 11) {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '00.000.000/0000-00';\n            }\n            else {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '000.000.000-00';\n            }\n        }\n        if (maskExpression.startsWith('percent')) {\n            if (inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n                const precision = this.getPrecision(maskExpression);\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            }\n            if (inputValue.indexOf('.') > 0 &&\n                !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n                const base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n                // eslint-disable-next-line no-param-reassign\n                inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            }\n            else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        else if (maskExpression.startsWith('separator')) {\n            if (inputValue.match('[wа-яА-Я]') ||\n                inputValue.match('[ЁёА-я]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) ||\n                inputValue.match('[^A-Za-z0-9,]')) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n            }\n            // eslint-disable-next-line no-param-reassign\n            inputValue =\n                inputValue.length > 1 &&\n                    inputValue[0] === '0' &&\n                    !this._compareOrIncludes(inputValue[1], this.decimalMarker, this.thousandSeparator) &&\n                    !backspaced\n                    ? inputValue.slice(1, inputValue.length)\n                    : inputValue;\n            if (backspaced) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator)\n                    ? inputValue.slice(0, inputValue.length - 1)\n                    : inputValue;\n            }\n            // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n            //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n            const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n            let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, '');\n            //.replace(decimalMarkerEscaped, '');\n            if (Array.isArray(this.decimalMarker)) {\n                for (const marker of this.decimalMarker) {\n                    invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), '');\n                }\n            }\n            else {\n                invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n            }\n            const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n            if (inputValue.match(invalidCharRegexp) ||\n                (inputValue.length === 1 &&\n                    this._compareOrIncludes(inputValue, this.decimalMarker, this.thousandSeparator))) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            const precision = this.getPrecision(maskExpression);\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n            result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n            const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n            const shiftStep = result.length - inputValue.length;\n            if (shiftStep > 0 && result[position] !== ',') {\n                backspaceShift = true;\n                let _shift = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            }\n            else if ((commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\n                (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                // eslint-disable-next-line no-param-reassign\n                position += shiftStep;\n                this._shift.add(position);\n            }\n            else {\n                this._shift.clear();\n            }\n        }\n        else {\n            for (\n            // eslint-disable-next-line\n            let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i]) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\n                    maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                }\n                else if (maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\n                    maskExpression[cursor + 1] === '*') {\n                    result += inputSymbol;\n                    multi = true;\n                }\n                else if (maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n                    result += inputSymbol;\n                    cursor += 3;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            cursor += 1;\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    const daysCount = 31;\n                    if (maskExpression[cursor] === 'd') {\n                        if ((Number(inputSymbol) > 3 && this.leadZeroDateTime) ||\n                            Number(inputValue.slice(cursor, cursor + 2)) > daysCount ||\n                            inputValue[cursor + 1] === '/') {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        const monthsCount = 12;\n                        // mask without day\n                        const withoutDays = cursor === 0 &&\n                            (Number(inputSymbol) > 2 ||\n                                Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                                inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for input\n                        const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            ((inputValue[cursor - 2] === '/' &&\n                                Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount &&\n                                inputValue[cursor] !== '/') ||\n                                inputValue[cursor] === '/' ||\n                                (inputValue[cursor - 3] === '/' &&\n                                    Number(inputValue.slice(cursor - 2, cursor)) > monthsCount &&\n                                    inputValue[cursor - 1] !== '/') ||\n                                inputValue[cursor - 1] === '/');\n                        // 10<day<31 && month<12 for input\n                        const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] === '/' &&\n                            (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                                inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for paste whole data\n                        const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            !inputValue.slice(cursor - 2, cursor).includes('/') &&\n                            Number(inputValue.slice(cursor - 2, cursor)) > monthsCount;\n                        // 10<day<31 && month<12 for paste whole data\n                        const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] !== '/' &&\n                            Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n                        if ((Number(inputSymbol) > 1 && this.leadZeroDateTime) ||\n                            withoutDays ||\n                            day1monthInput ||\n                            day2monthInput ||\n                            day1monthPaste ||\n                            day2monthPaste) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\n                    i--;\n                }\n                else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.maskAvailablePatterns[maskExpression[cursor]] &&\n                    this.maskAvailablePatterns[maskExpression[cursor]]?.optional) {\n                    if (!!inputArray[cursor] &&\n                        maskExpression !== '099.099.099.099' &&\n                        maskExpression !== '000.000.000-00' &&\n                        maskExpression !== '00.000.000/0000-00' &&\n                        !maskExpression.match(/^9+\\.0+$/)) {\n                        result += inputArray[cursor];\n                    }\n                    cursor++;\n                    i--;\n                }\n                else if (this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.maskExpression[cursor + 1] === '?' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.showMaskTyped &&\n                    this.maskSpecialCharacters.indexOf(inputSymbol) < 0 &&\n                    inputSymbol !== this.placeHolderCharacter) {\n                    stepBack = true;\n                }\n            }\n        }\n        if (result.length + 1 === maskExpression.length &&\n            this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n        let newPosition = position + 1;\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n        let actualShift = justPasted && !maskExpression.startsWith('separator')\n            ? cursor\n            : this._shift.has(position)\n                ? shift\n                : 0;\n        if (stepBack) {\n            actualShift--;\n        }\n        cb(actualShift, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let onlySpecial = false;\n        if (backspaced) {\n            onlySpecial = inputArray.every((char) => this.maskSpecialCharacters.includes(char));\n        }\n        let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    _findSpecialChar(inputSymbol) {\n        return this.maskSpecialCharacters.find((val) => val === inputSymbol);\n    }\n    _checkSymbolMask(inputSymbol, maskSymbol) {\n        this.maskAvailablePatterns = this.customPattern\n            ? this.customPattern\n            : this.maskAvailablePatterns;\n        return (this.maskAvailablePatterns[maskSymbol] &&\n            this.maskAvailablePatterns[maskSymbol].pattern &&\n            this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol));\n    }\n    _stripToDecimal(str) {\n        return str\n            .split('')\n            .filter((i, idx) => {\n            return (i.match('^-?\\\\d') ||\n                i.match('\\\\s') ||\n                i === '.' ||\n                i === ',' ||\n                (i === '-' && idx === 0 && this.allowNegativeNumbers));\n        })\n            .join('');\n    }\n    _charToRegExpExpression(char) {\n        // if (Array.isArray(char)) {\n        // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n        // }\n        if (char) {\n            const charsToEscape = '[\\\\^$.|?*+()';\n            return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n        }\n        return char;\n    }\n    _shiftStep(maskExpression, cursor, inputLength) {\n        const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n        this._shift.add(shiftStep + this.prefix.length || 0);\n    }\n    _compareOrIncludes(value, comparedValue, excludedValue) {\n        return Array.isArray(comparedValue)\n            ? comparedValue.filter((v) => v !== excludedValue).includes(value)\n            : value === comparedValue;\n    }\n}\nMaskApplierService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: MaskApplierService, deps: [{ token: config }], target: i0.ɵɵFactoryTarget.Injectable });\nMaskApplierService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: MaskApplierService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: MaskApplierService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [config]\n                }] }]; } });\n\nclass MaskService extends MaskApplierService {\n    constructor(document, _config, _elementRef, _renderer) {\n        super(_config);\n        this.document = document;\n        this._config = _config;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.maskExpression = '';\n        this.isNumberValue = false;\n        this.placeHolderCharacter = '_';\n        this.maskIsShown = '';\n        this.selStart = null;\n        this.selEnd = null;\n        /**\n         * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n         * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n         */\n        this.writingValue = false;\n        this.maskChanged = false;\n        this.triggerOnMaskChange = false;\n        this.onChange = (_) => { };\n    }\n    // eslint-disable-next-line complexity\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => { }) {\n        if (!maskExpression) {\n            return inputValue !== this.actualValue ? this.actualValue : inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown;\n        }\n        const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n        let newInputValue = '';\n        if (this.hiddenInput && !this.writingValue) {\n            let actualResult = this.actualValue.split('');\n            // eslint-disable  @typescript-eslint/no-unused-expressions\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            inputValue !== '' && actualResult.length\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                    ? inputValue.length > actualResult.length\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\n                        : inputValue.length < actualResult.length\n                            ? actualResult.length - inputValue.length === 1\n                                ? actualResult.splice(this.selStart - 1, 1)\n                                : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                            : null\n                    : null\n                : (actualResult = []);\n            if (this.showMaskTyped) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.removeMask(inputValue);\n            }\n            // eslint-enable  @typescript-eslint/no-unused-expressions\n            newInputValue =\n                this.actualValue.length && actualResult.length <= inputValue.length\n                    ? this.shiftTypedSymbols(actualResult.join(''))\n                    : inputValue;\n        }\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n        this.actualValue = this.getActualValue(result);\n        // handle some separator implications:\n        // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n        if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n            this.decimalMarker = ',';\n        }\n        // b) remove decimal marker from list of special characters to mask\n        if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item) => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator));\n        }\n        this.formControlResult(result);\n        if (!this.showMaskTyped) {\n            if (this.hiddenInput) {\n                return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n            }\n            return result;\n        }\n        const resLen = result.length;\n        const prefNmask = this.prefix + this.maskIsShown;\n        if (this.maskExpression.includes('H')) {\n            const countSkipedSymbol = this._numberSkipedSymbols(result);\n            return result + prefNmask.slice(resLen + countSkipedSymbol);\n        }\n        else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n            return result + prefNmask;\n        }\n        return result + prefNmask.slice(resLen);\n    }\n    // get the number of characters that were shifted\n    _numberSkipedSymbols(value) {\n        const regex = /(^|\\D)(\\d\\D)/g;\n        let match = regex.exec(value);\n        let countSkipedSymbol = 0;\n        while (match != null) {\n            countSkipedSymbol += 1;\n            match = regex.exec(value);\n        }\n        return countSkipedSymbol;\n    }\n    applyValueChanges(position, justPasted, backspaced, cb = () => { }) {\n        const formElement = this._elementRef.nativeElement;\n        formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n        if (formElement === this._getActiveElement()) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n    hideInput(inputValue, maskExpression) {\n        return inputValue\n            .split('')\n            .map((curr, index) => {\n            if (this.maskAvailablePatterns &&\n                this.maskAvailablePatterns[maskExpression[index]] &&\n                this.maskAvailablePatterns[maskExpression[index]]?.symbol) {\n                return this.maskAvailablePatterns[maskExpression[index]]?.symbol;\n            }\n            return curr;\n        })\n            .join('');\n    }\n    // this function is not necessary, it checks result against maskExpression\n    getActualValue(res) {\n        const compare = res\n            .split('')\n            .filter((symbol, i) => this._checkSymbolMask(symbol, this.maskExpression[i]) ||\n            (this.maskSpecialCharacters.includes(this.maskExpression[i]) &&\n                symbol === this.maskExpression[i]));\n        if (compare.join('') === res) {\n            return compare.join('');\n        }\n        return res;\n    }\n    shiftTypedSymbols(inputValue) {\n        let symbolToReplace = '';\n        const newInputValue = (inputValue &&\n            inputValue.split('').map((currSymbol, index) => {\n                if (this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\n                    inputValue[index + 1] !== this.maskExpression[index + 1]) {\n                    symbolToReplace = currSymbol;\n                    return inputValue[index + 1];\n                }\n                if (symbolToReplace.length) {\n                    const replaceSymbol = symbolToReplace;\n                    symbolToReplace = '';\n                    return replaceSymbol;\n                }\n                return currSymbol;\n            })) ||\n            [];\n        return newInputValue.join('');\n    }\n    /**\n     * Convert number value to string\n     * 3.1415 -> '3.1415'\n     * 1e-7 -> '0.0000001'\n     */\n    numberToString(value) {\n        if (!value && value !== 0) {\n            return String(value);\n        }\n        return Number(value).toLocaleString('fullwide', {\n            useGrouping: false,\n            maximumFractionDigits: 20,\n        });\n    }\n    showMaskInInput(inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            }\n            else {\n                return this.shownMaskExpression;\n            }\n        }\n        else if (this.showMaskTyped) {\n            if (inputVal) {\n                if (this.maskExpression === 'IP') {\n                    return this._checkForIp(inputVal);\n                }\n                if (this.maskExpression === 'CPF_CNPJ') {\n                    return this._checkForCpfCnpj(inputVal);\n                }\n            }\n            return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n        }\n        return '';\n    }\n    clearIfNotMatchFn() {\n        const formElement = this._elementRef.nativeElement;\n        if (this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !==\n                formElement.value.replace(/_/g, '').length) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(formElement.value, this.maskExpression);\n        }\n    }\n    set formElementProperty([name, value]) {\n        Promise.resolve().then(() => this._renderer.setProperty(this._elementRef.nativeElement, name, value));\n    }\n    checkSpecialCharAmount(mask) {\n        const chars = mask.split('').filter((item) => this._findSpecialChar(item));\n        return chars.length;\n    }\n    removeMask(inputValue) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));\n    }\n    _checkForIp(inputVal) {\n        if (inputVal === '#') {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            if (inputVal[i]?.match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return this.placeHolderCharacter;\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n    _checkForCpfCnpj(inputVal) {\n        const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        if (inputVal === '#') {\n            return cpf;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            if (inputVal[i]?.match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return cpf.slice(arr.length, cpf.length);\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return cpf.slice(arr.length + 1, cpf.length);\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return cpf.slice(arr.length + 2, cpf.length);\n        }\n        if (arr.length > 9 && arr.length < 11) {\n            return cpf.slice(arr.length + 3, cpf.length);\n        }\n        if (arr.length === 11) {\n            return '';\n        }\n        if (arr.length === 12) {\n            if (inputVal.length === 17) {\n                return cnpj.slice(16, cnpj.length);\n            }\n            return cnpj.slice(15, cnpj.length);\n        }\n        if (arr.length > 12 && arr.length <= 14) {\n            return cnpj.slice(arr.length + 4, cnpj.length);\n        }\n        return '';\n    }\n    /**\n     * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n     */\n    _getActiveElement(document = this.document) {\n        const shadowRootEl = document?.activeElement?.shadowRoot;\n        if (!shadowRootEl?.activeElement) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    /**\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n     * model value too. Therefore, we don't trigger onChange in this scenario.\n     * @param inputValue the current form input value\n     */\n    formControlResult(inputValue) {\n        if (this.writingValue || (!this.triggerOnMaskChange && this.maskChanged)) {\n            this.maskChanged = false;\n            return;\n        }\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n        }\n        else if (this.dropSpecialCharacters) {\n            this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n        }\n        else {\n            this.onChange(this._removeSuffix(inputValue));\n        }\n    }\n    _toNumber(value) {\n        if (!this.isNumberValue || value === '') {\n            return value;\n        }\n        const num = Number(value);\n        return Number.isNaN(num) ? value : num;\n    }\n    _removeMask(value, specialCharactersForRemove) {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n    _removePrefix(value) {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    }\n    _removeSuffix(value) {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, '') : value;\n    }\n    _retrieveSeparatorValue(result) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n    }\n    _regExpForRemove(specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map((item) => `\\\\${item}`).join('|'), 'gi');\n    }\n    _checkSymbols(result) {\n        if (result === '') {\n            return result;\n        }\n        const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n        let separatorValue = this._retrieveSeparatorValue(result);\n        if (this.decimalMarker !== '.' && !Array.isArray(this.decimalMarker)) {\n            separatorValue = separatorValue.replace(this.decimalMarker, '.');\n        }\n        if (!this.isNumberValue) {\n            return separatorValue;\n        }\n        if (separatorPrecision) {\n            if (result === this.decimalMarker) {\n                return null;\n            }\n            return this._checkPrecision(this.maskExpression, separatorValue);\n        }\n        else {\n            return Number(separatorValue);\n        }\n    }\n    // TODO should think about helpers or separting decimal precision to own property\n    _retrieveSeparatorPrecision(maskExpretion) {\n        const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n    _checkPrecision(separatorExpression, separatorValue) {\n        if (separatorExpression.indexOf('2') > 0) {\n            return Number(separatorValue).toFixed(2);\n        }\n        return Number(separatorValue);\n    }\n}\nMaskService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: MaskService, deps: [{ token: DOCUMENT }, { token: config }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Injectable });\nMaskService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: MaskService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: MaskService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [config]\n                }] }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; } });\n\nclass MaskDirective {\n    constructor(document, _maskService, _config) {\n        this.document = document;\n        this._maskService = _maskService;\n        this._config = _config;\n        // eslint-disable-next-line @angular-eslint/no-input-rename\n        this.maskExpression = '';\n        this.specialCharacters = [];\n        this.patterns = {};\n        this.prefix = '';\n        this.suffix = '';\n        this.thousandSeparator = ' ';\n        this.decimalMarker = '.';\n        this.dropSpecialCharacters = null;\n        this.hiddenInput = null;\n        this.showMaskTyped = null;\n        this.placeHolderCharacter = null;\n        this.shownMaskExpression = null;\n        this.showTemplate = null;\n        this.clearIfNotMatch = null;\n        this.validation = null;\n        this.separatorLimit = null;\n        this.allowNegativeNumbers = null;\n        this.leadZeroDateTime = null;\n        this.triggerOnMaskChange = null;\n        this.maskFilled = new EventEmitter();\n        this._maskValue = '';\n        this._position = null;\n        this._maskExpressionArray = [];\n        this._justPasted = false;\n        this.onChange = (_) => { };\n        this.onTouch = () => { };\n    }\n    ngOnChanges(changes) {\n        const { maskExpression, specialCharacters, patterns, prefix, suffix, thousandSeparator, decimalMarker, dropSpecialCharacters, hiddenInput, showMaskTyped, placeHolderCharacter, shownMaskExpression, showTemplate, clearIfNotMatch, validation, separatorLimit, allowNegativeNumbers, leadZeroDateTime, triggerOnMaskChange, } = changes;\n        if (maskExpression) {\n            if (maskExpression.currentValue !== maskExpression.previousValue &&\n                !maskExpression.firstChange) {\n                this._maskService.maskChanged = true;\n            }\n            if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n                this._maskExpressionArray = maskExpression.currentValue\n                    .split('||')\n                    .sort((a, b) => {\n                    return a.length - b.length;\n                });\n                this._setMask();\n            }\n            else {\n                this._maskExpressionArray = [];\n                this._maskValue = maskExpression.currentValue || '';\n                this._maskService.maskExpression = this._maskValue;\n            }\n        }\n        if (specialCharacters) {\n            if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n                return;\n            }\n            else {\n                this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n            }\n        }\n        // Only overwrite the mask available patterns if a pattern has actually been passed in\n        if (patterns && patterns.currentValue) {\n            this._maskService.maskAvailablePatterns = patterns.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator.currentValue;\n        }\n        if (decimalMarker) {\n            this._maskService.decimalMarker = decimalMarker.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n        if (placeHolderCharacter) {\n            this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        if (separatorLimit) {\n            this._maskService.separatorLimit = separatorLimit.currentValue;\n        }\n        if (allowNegativeNumbers) {\n            this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n            if (this._maskService.allowNegativeNumbers) {\n                this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter((c) => c !== '-');\n            }\n        }\n        if (leadZeroDateTime) {\n            this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n        }\n        if (triggerOnMaskChange) {\n            this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n        }\n        this._applyMask();\n    }\n    // eslint-disable-next-line complexity\n    validate({ value }) {\n        if (!this._maskService.validation || !this._maskValue) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskService.cpfCnpjError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskValue.startsWith('separator')) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (timeMasks.includes(this._maskValue)) {\n            return this._validateTime(value);\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt = 0;\n            for (const key in this._maskService.maskAvailablePatterns) {\n                if (this._maskService.maskAvailablePatterns[key].optional) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        const opt = this._maskValue\n                            .split('')\n                            .filter((i) => i === key)\n                            .join('');\n                        counterOfOpt += opt.length;\n                    }\n                    else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this._maskValue.indexOf(key) !== -1 &&\n                        value.toString().length >= this._maskValue.indexOf(key)) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (this._maskValue.indexOf('{') === 1 &&\n                value.toString().length ===\n                    this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4) {\n                return null;\n            }\n            if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n                return null;\n            }\n            else if ((this._maskValue.indexOf('*') > 1 &&\n                value.toString().length < this._maskValue.indexOf('*')) ||\n                (this._maskValue.indexOf('?') > 1 &&\n                    value.toString().length < this._maskValue.indexOf('?')) ||\n                this._maskValue.indexOf('{') === 1) {\n                return this._createValidationError(value);\n            }\n            if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n                const length = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length -\n                        this._maskService.checkSpecialCharAmount(this._maskValue) -\n                        counterOfOpt\n                    : this._maskValue.length - counterOfOpt;\n                if (value.toString().length < length) {\n                    return this._createValidationError(value);\n                }\n            }\n        }\n        if (value) {\n            this.maskFilled.emit();\n            return null;\n        }\n        return null;\n    }\n    onPaste() {\n        this._justPasted = true;\n    }\n    onModelChange(value) {\n        // on form reset we need to update the actualValue\n        if ((value === '' || value === null || value === undefined) && this._maskService.actualValue) {\n            this._maskService.actualValue = this._maskService.getActualValue('');\n        }\n    }\n    onInput(e) {\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        const position = el.selectionStart === 1\n            ? el.selectionStart + this._maskService.prefix.length\n            : el.selectionStart;\n        let caretShift = 0;\n        let backspaceShift = false;\n        this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace' || this._code === 'Delete', (shift, _backspaceShift) => {\n            this._justPasted = false;\n            caretShift = shift;\n            backspaceShift = _backspaceShift;\n        });\n        // only set the selection if the element is active\n        if (this._getActiveElement() !== el) {\n            return;\n        }\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        let positionToApply = this._position\n            ? this._inputValue.length + position + caretShift\n            : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n        if (positionToApply > this._getActualInputLength()) {\n            positionToApply = this._getActualInputLength();\n        }\n        if (positionToApply < 0) {\n            positionToApply = 0;\n        }\n        el.setSelectionRange(positionToApply, positionToApply);\n        this._position = null;\n    }\n    onBlur() {\n        if (this._maskValue) {\n            this._maskService.clearIfNotMatchFn();\n        }\n        this.onTouch();\n    }\n    onClick(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        const el = e.target;\n        const posStart = 0;\n        const posEnd = 0;\n        if (el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // eslint-disable-next-line\n            e.keyCode !== 38) {\n            if (this._maskService.showMaskTyped) {\n                // We are showing the mask in the input\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange &&\n                    this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    // the input ONLY contains the mask, so position the cursor at the start\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                else {\n                    // the input contains some characters already\n                    if (el.selectionStart > this._maskService.actualValue.length) {\n                        // if the user clicked beyond our value's length, position the cursor at the end of our value\n                        el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n                    }\n                }\n            }\n        }\n        const nextValue = !el.value || el.value === this._maskService.prefix\n            ? this._maskService.prefix + this._maskService.maskIsShown\n            : el.value;\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n        if (el.value !== nextValue) {\n            el.value = nextValue;\n        }\n        /** fix of cursor position with prefix when mouse click occur */\n        if ((el.selectionStart || el.selectionEnd) <=\n            this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n        /** select only inserted text */\n        if (el.selectionEnd > this._getActualInputLength()) {\n            el.selectionEnd = this._getActualInputLength();\n        }\n    }\n    // eslint-disable-next-line complexity\n    onKeyDown(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        this._code = e.code ? e.code : e.key;\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n            if (e.keyCode === 8 && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (e.keyCode === 8 && el.selectionStart !== 0) {\n                // If specialChars is false, (shouldn't ever happen) then set to the defaults\n                this.specialCharacters = this.specialCharacters?.length\n                    ? this.specialCharacters\n                    : this._config.specialCharacters;\n                if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n                    el.setSelectionRange(this.prefix.length, el.selectionEnd);\n                }\n                else {\n                    if (this._inputValue.length !== el.selectionStart &&\n                        el.selectionStart !== 1) {\n                        while (this.specialCharacters.includes(this._inputValue[el.selectionStart - 1].toString()) &&\n                            ((this.prefix.length >= 1 && el.selectionStart > this.prefix.length) ||\n                                this.prefix.length === 0)) {\n                            el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n                        }\n                    }\n                }\n            }\n            this.checkSelectionOnDeletion(el);\n            if (this._maskService.prefix.length &&\n                el.selectionStart <= this._maskService.prefix.length &&\n                el.selectionEnd <= this._maskService.prefix.length) {\n                e.preventDefault();\n            }\n            const cursorStart = el.selectionStart;\n            if (e.keyCode === 8 &&\n                !el.readOnly &&\n                cursorStart === 0 &&\n                el.selectionEnd === el.value.length &&\n                el.value.length !== 0) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n        if (!!this.suffix &&\n            this.suffix.length > 1 &&\n            this._inputValue.length - this.suffix.length < el.selectionStart) {\n            el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n        else if ((e.keyCode === 65 && e.ctrlKey) ||\n            (e.keyCode === 65 && e.metaKey) // Cmd + A (Mac)\n        ) {\n            el.setSelectionRange(0, this._getActualInputLength());\n            e.preventDefault();\n        }\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n    }\n    /** It writes the value in the input */\n    async writeValue(inputValue) {\n        if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n            if ('disable' in inputValue) {\n                this.setDisabledState(Boolean(inputValue.disable));\n            }\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.value;\n        }\n        if (typeof inputValue === 'number' || this._maskValue.startsWith('separator')) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this._maskService.numberToString(inputValue);\n            if (!Array.isArray(this.decimalMarker)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue =\n                    this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n            }\n            this._maskService.isNumberValue = true;\n        }\n        if (typeof inputValue !== 'string') {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = '';\n        }\n        this._inputValue = inputValue;\n        this._setMask();\n        if ((inputValue && this._maskService.maskExpression) ||\n            (this._maskService.maskExpression &&\n                (this._maskService.prefix || this._maskService.showMaskTyped))) {\n            // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n            this._maskService.writingValue = true;\n            this._maskService.formElementProperty = [\n                'value',\n                this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n            ];\n            // Let the service know we've finished writing value\n            this._maskService.writingValue = false;\n        }\n        else {\n            this._maskService.formElementProperty = ['value', inputValue];\n        }\n        this._inputValue = inputValue;\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n    }\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n    }\n    _getActiveElement(document = this.document) {\n        const shadowRootEl = document?.activeElement?.shadowRoot;\n        if (!shadowRootEl?.activeElement) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    checkSelectionOnDeletion(el) {\n        el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n        el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n    }\n    /** It disables the input element */\n    setDisabledState(isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n    _repeatPatternSymbols(maskExp) {\n        return ((maskExp.match(/{[0-9]+}/) &&\n            maskExp.split('').reduce((accum, currval, index) => {\n                this._start = currval === '{' ? index : this._start;\n                if (currval !== '}') {\n                    return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n                }\n                this._end = index;\n                const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n                const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                return accum + replaceWith;\n            }, '')) ||\n            maskExp);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _applyMask() {\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n    _validateTime(value) {\n        const rowMaskLen = this._maskValue.split('').filter((s) => s !== ':').length;\n        if (!value) {\n            return null; // Don't validate empty values to allow for optional form control\n        }\n        if ((+value[value.length - 1] === 0 && value.length < rowMaskLen) ||\n            value.length <= rowMaskLen - 2) {\n            return this._createValidationError(value);\n        }\n        return null;\n    }\n    _getActualInputLength() {\n        return (this._maskService.actualValue.length ||\n            this._maskService.actualValue.length + this._maskService.prefix.length);\n    }\n    _createValidationError(actualValue) {\n        return {\n            mask: {\n                requiredMask: this._maskValue,\n                actualValue,\n            },\n        };\n    }\n    _setMask() {\n        if (this._maskExpressionArray.length > 0) {\n            this._maskExpressionArray.some((mask) => {\n                const test = this._maskService.removeMask(this._inputValue)?.length <=\n                    this._maskService.removeMask(mask)?.length;\n                if (this._inputValue && test) {\n                    this._maskValue = mask;\n                    this.maskExpression = mask;\n                    this._maskService.maskExpression = mask;\n                    return test;\n                }\n                else {\n                    this._maskValue = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n                    this.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n                    this._maskService.maskExpression =\n                        this._maskExpressionArray[this._maskExpressionArray.length - 1];\n                }\n            });\n        }\n    }\n}\nMaskDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: MaskDirective, deps: [{ token: DOCUMENT }, { token: MaskService }, { token: config }], target: i0.ɵɵFactoryTarget.Directive });\nMaskDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.8\", type: MaskDirective, selector: \"input[mask], textarea[mask]\", inputs: { maskExpression: [\"mask\", \"maskExpression\"], specialCharacters: \"specialCharacters\", patterns: \"patterns\", prefix: \"prefix\", suffix: \"suffix\", thousandSeparator: \"thousandSeparator\", decimalMarker: \"decimalMarker\", dropSpecialCharacters: \"dropSpecialCharacters\", hiddenInput: \"hiddenInput\", showMaskTyped: \"showMaskTyped\", placeHolderCharacter: \"placeHolderCharacter\", shownMaskExpression: \"shownMaskExpression\", showTemplate: \"showTemplate\", clearIfNotMatch: \"clearIfNotMatch\", validation: \"validation\", separatorLimit: \"separatorLimit\", allowNegativeNumbers: \"allowNegativeNumbers\", leadZeroDateTime: \"leadZeroDateTime\", triggerOnMaskChange: \"triggerOnMaskChange\" }, outputs: { maskFilled: \"maskFilled\" }, host: { listeners: { \"paste\": \"onPaste()\", \"ngModelChange\": \"onModelChange($event)\", \"input\": \"onInput($event)\", \"blur\": \"onBlur()\", \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true,\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true,\n        },\n        MaskService,\n    ], exportAs: [\"mask\", \"ngxMask\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: MaskDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[mask], textarea[mask]',\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => MaskDirective),\n                            multi: true,\n                        },\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef(() => MaskDirective),\n                            multi: true,\n                        },\n                        MaskService,\n                    ],\n                    exportAs: 'mask,ngxMask',\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MaskService }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [config]\n                }] }]; }, propDecorators: { maskExpression: [{\n                type: Input,\n                args: ['mask']\n            }], specialCharacters: [{\n                type: Input\n            }], patterns: [{\n                type: Input\n            }], prefix: [{\n                type: Input\n            }], suffix: [{\n                type: Input\n            }], thousandSeparator: [{\n                type: Input\n            }], decimalMarker: [{\n                type: Input\n            }], dropSpecialCharacters: [{\n                type: Input\n            }], hiddenInput: [{\n                type: Input\n            }], showMaskTyped: [{\n                type: Input\n            }], placeHolderCharacter: [{\n                type: Input\n            }], shownMaskExpression: [{\n                type: Input\n            }], showTemplate: [{\n                type: Input\n            }], clearIfNotMatch: [{\n                type: Input\n            }], validation: [{\n                type: Input\n            }], separatorLimit: [{\n                type: Input\n            }], allowNegativeNumbers: [{\n                type: Input\n            }], leadZeroDateTime: [{\n                type: Input\n            }], triggerOnMaskChange: [{\n                type: Input\n            }], maskFilled: [{\n                type: Output\n            }], onPaste: [{\n                type: HostListener,\n                args: ['paste']\n            }], onModelChange: [{\n                type: HostListener,\n                args: ['ngModelChange', ['$event']]\n            }], onInput: [{\n                type: HostListener,\n                args: ['input', ['$event']]\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\n\nclass MaskPipe {\n    constructor(_maskService) {\n        this._maskService = _maskService;\n    }\n    transform(value, mask, thousandSeparator = null) {\n        if (!value && typeof value !== 'number') {\n            return '';\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator;\n        }\n        if (typeof mask === 'string') {\n            return this._maskService.applyMask(`${value}`, mask);\n        }\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\n    }\n}\nMaskPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: MaskPipe, deps: [{ token: MaskApplierService }], target: i0.ɵɵFactoryTarget.Pipe });\nMaskPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: MaskPipe, name: \"mask\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: MaskPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'mask',\n                    pure: true,\n                }]\n        }], ctorParameters: function () { return [{ type: MaskApplierService }]; } });\n\n/**\n * @internal\n */\nfunction _configFactory(initConfig, configValue) {\n    return configValue instanceof Function\n        ? { ...initConfig, ...configValue() }\n        : { ...initConfig, ...configValue };\n}\nclass NgxMaskModule {\n    static forRoot(configValue) {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue,\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig,\n                },\n                {\n                    provide: config,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\n                },\n                MaskApplierService,\n            ],\n        };\n    }\n    static forChild() {\n        return {\n            ngModule: NgxMaskModule,\n        };\n    }\n}\nNgxMaskModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgxMaskModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxMaskModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgxMaskModule, declarations: [MaskDirective, MaskPipe], exports: [MaskDirective, MaskPipe] });\nNgxMaskModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgxMaskModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgxMaskModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [MaskDirective, MaskPipe],\n                    declarations: [MaskDirective, MaskPipe],\n                }]\n        }] });\n\nconst commonjsGlobal = typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof window !== 'undefined'\n        ? window\n        : typeof global !== 'undefined'\n            ? global\n            : typeof self !== 'undefined'\n                ? self\n                : {};\n(function () {\n    if (!commonjsGlobal.KeyboardEvent) {\n        commonjsGlobal.KeyboardEvent = function (_eventType, _init) { };\n    }\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation };\n//# sourceMappingURL=ngx-mask.mjs.map\n"]},"metadata":{},"sourceType":"module"}